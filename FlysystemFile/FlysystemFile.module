<?php namespace ProcessWire;
/**
 * Flysystem FileField (0.0.1)
 * FieldtypeFile using league/flysystem
 * 
 * @author Benjamin Milde
 * 
 * ProcessWire 2.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://www.processwire.com
 * http://www.ryancramer.com
 * 
 */

use League\Flysystem;

class FlysystemFile extends FieldtypeFile {

	public function __construct()
	{
		parent::__construct();
		$this->defaultInputfieldClass = 'InputfieldFileFlysystem';
	}

	public function init()
	{
		require_once(__DIR__ . '/FlyingPagefiles.php');
		require_once(__DIR__ . '/FlyingPagefile.php');
		require_once(__DIR__ . '/FlysystemUrlPlugin.php');

		$this->addHookProperty('Field::flysystem', $this, 'getManager');
		$this->addHookProperty('Field::adapter', $this, 'getAdapterProp');
		$this->addHookProperty('Fields::save', $this, 'checkPublicSettingChanged');
	}

	public function checkPublicSettingChanged (HookEvent $event)
	{
		/** @var Field $field */
		$field = $event->arguments(0);
		if(!$field->type instanceof self) return;
		if(!$field->isChanged('public')) return;
		$this->warning(sprintf($this->_('Visibility setting for field \'%s\' changed. This does only affect newly added files, but not old ones.'), $field->name));
	}

	/**
	 * The first adapter is used as primary adapter
	 * @return string 
	 */
	protected function getAdapterProp(HookEvent $event)
	{
		$field = $event->object;
		if(!$field->type instanceof self) return;
		$event->return = $field->adapters[0];
	}

	/**
	 * Return the mount manager as property on the field
	 * @return Flysystem\MountManager 
	 */
	protected function getManager(HookEvent $event)
	{
		$field = $event->object;
		if(!$field->type instanceof self) return;
		$event->return = $this->getMountManager($field);
	}

	/**
	 * Initialize all the filesystems, which are set up
	 * @param Field $field
	 * @return Flysystem\MountManager
	 */
	public function getMountManager(Field $field)
	{
		$manager = new Flysystem\MountManager;
		$adapters = $this->getAdapters();
		$activeAdapters = array_intersect_key($adapters, array_flip($field->adapters));
		
		foreach ($activeAdapters as $key => $adapterSetting) {
			$callbackConstructor = $adapterSetting['constructAdapter'];
			$callbackUrl = $adapterSetting['urlCallback'];
			$filesystem = new Flysystem\Filesystem(call_user_func($callbackConstructor, $field));
			$filesystem->addPlugin(new UrlPlugin(call_user_func($callbackUrl, $field)));
			$manager->mountFilesystem($key, $filesystem);
		}

		return $manager;
	}

	/**
	 * Hookable function for Flysystem modules to hook into
	 */
	public function ___getAdapters()
	{
		return [];
	}

	/**
	 * Get the field setting for an adapter
	 * @param Field $field
	 * @param string $adapter
	 * @return InputfieldFieldset|null
	 */
	protected function getAdapterSettings($field, $adapter)
	{
		$callback = $this->getAdapters()[$adapter]['adapterSettings'];
		return is_callable($callback) 
			? call_user_func($callback, $field) 
			: null;
	}

	public function ___getConfigInputfields(Field $field) {

		$inputfields = parent::___getConfigInputfields($field);

		$f = $this->modules->get('InputfieldAsmSelect'); 
		$f->attr('name', 'adapters'); 
		$f->label = $this->_('Adapters');
		$f->value = $field->adapters ?: [];
		$f->description = $this->_('One or more Flysystem adapters.');
		$f->notes = sprintf($this->_('For more information on multi Filesystem usage visit %s.'), '[Flysystem\'s Mount Manager Documentation](https://flysystem.thephpleague.com/mount-manager/)');
		$f->addOptions(array_reduce($this->getAdapters(), function($carry, $adapterSetup){
			$carry[$adapterSetup['managerPrefix']] = $adapterSetup['label'];
			return $carry;
		}, []));
		$f->columnWidth = 50;
		$inputfields->add($f);

		$f = $this->modules->get('InputfieldCheckbox');
		$f->attr('name', 'public');
		$f->label = $this->_('Public');
		$f->description = $this->_('Should files be made public (if supported)');
		$f->value = $field->public;
		$f->attr('checked', $field->public);
		$f->columnWidth = 50;
		$inputfields->add($f);

		$f = $this->modules->get('InputfieldFieldset');
		$f->label = $this->_('Adapter Settings');
		foreach ($field->adapters as $adapter) {
			$f->add($this->getAdapterSettings($field, $adapter));
		}
		$inputfields->add($f); 
		
		return $inputfields;
	}

	/**
	 * ===========================================================================
	 * Overwrite FieldtypeFile
	 */

	public function sanitizeValue(Page $page, Field $field, $value) {
		if($value instanceof FlyingPagefiles) return $value; 
		$pagefiles = $page->getUnformatted($field->name); 
		if(!$value) return $pagefiles; 
		if($value instanceof FlyingPagefile) return $pagefiles->add($value); 
		if(!is_array($value)) $value = array($value); 
		foreach($value as $file) $pagefiles->add($file); 
		return $pagefiles; 
	}

	protected function getBlankPagefile(FlyingPagefiles $pagefiles, $filename) {
		return $this->wire(new FlyingPagefile($pagefiles, $filename)); 
	}

	public function getBlankValue(Page $page, Field $field) {
		$pagefiles = $this->wire(new FlyingPagefiles($page));
		$pagefiles->setField($field); 
		$pagefiles->setTrackChanges(true); 
		return $pagefiles; 
	}

	public function ___sleepValue(Page $page, Field $field, $value) {

		$sleepValue = array();
		if(!$value instanceof FlyingPagefiles) return $sleepValue; 
	
		foreach($value as $pagefile) {
			$item = array(
				'data' => $pagefile->basename, 
				'description' => $pagefile->description(true), 
				); 
	
			if($field->fileSchema & self::fileSchemaDate) { 
				$item['modified'] = date('Y-m-d H:i:s', $pagefile->modified);
				$item['created'] = date('Y-m-d H:i:s', $pagefile->created);
			}
	
			if($field->fileSchema & self::fileSchemaTags) {
				$item['tags'] = $pagefile->tags;
			}
	
			$sleepValue[] = $item;
		}
		return $sleepValue;
	}

	public function ___wakeupValue(Page $page, Field $field, $value) {

		if($value instanceof FlyingPagefiles) return $value; 
		$pagefiles = $this->getBlankValue($page, $field); 
		if(empty($value)) return $pagefiles; 
	
		if(!is_array($value) || array_key_exists('data', $value)) $value = array($value); 
		foreach($value as $v) {
			if(empty($v['data'])) continue; 
			$pagefile = $this->getBlankPagefile($pagefiles, $v['data']); 
			$pagefile->description(true, $v['description']); 
			if(isset($v['modified'])) $pagefile->modified = $v['modified'];
			if(isset($v['created'])) $pagefile->created = $v['created'];
			if(isset($v['tags'])) $pagefile->tags = $v['tags'];
			$pagefile->setTrackChanges(true); 
			$pagefiles->add($pagefile); 
		}
	
		$pagefiles->resetTrackChanges(true); 
		return $pagefiles;  
	}

}