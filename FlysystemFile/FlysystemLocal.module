<?php namespace ProcessWire;
/**
 * Flysystem FileField (0.0.1)
 * FieldtypeFile using league/flysystem
 * 
 * @author Benjamin Milde
 * 
 * ProcessWire 2.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://www.processwire.com
 * http://www.ryancramer.com
 * 
 */
use League\Flysystem\Adapter\Local;

require_once(__DIR__ . '/FlysystemAbstract.php');

class FlysystemLocal extends FlysystemAbstract {

	/**
	 * @return string Unique key for the adapter
	 */
	protected function key() { return 'local'; }

	/**
	 * @return string Label for the adapter
	 */
	protected function label() { return 'Local Filesystem Adapter'; }

	/**
	 * @param InputfieldFieldset $fieldset
	 * @param Field $field
	 * @return void
	 */
	protected function getConfigFields(InputfieldFieldset $fieldset, Field $field){
		$f = $this->modules->get('InputfieldText'); 
		$f->attr('name', 'local_path'); 
		$f->label = $this->_('Path');
		$f->value = $field->local_path;
		$f->description = $this->_('Absolute path or relative to $config->path->root.');
		$fieldset->add($f);
	}

	/**
	 * @param Field $field
	 * @return \League\Flysystem\AdapterInterface
	 */
	public function constructAdapter(Field $field){
		$path = substr($field->local_path, 0, 1) === '/'
			? $field->local_path
			: $this->config->paths->root . $field->local_path;
		return new Local($path);
	}
	
	/**
	 * @param Field $field
	 * @return callable Callback which does receive a file path and should return an url
	 */
	public function urlCallback(Field $field) {
		return function($path) use($field) {
			$footFolder = substr($field->local_path, 0, 1) === '/'
				? $field->local_path
				: $this->config->paths->root . $field->local_path;

			if(strpos($footFolder, $this->config->paths->root) !== 0) return '';
			return '/' . rtrim(str_replace($this->config->paths->root, '', $footFolder), '/') . '/' . $path;
		};
	}

}